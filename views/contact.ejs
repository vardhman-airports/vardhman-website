<%- include('partials/header',{currentTitle: 'Contact'}) %>
    <br><br><br><br><br>
    <div class="contact-hero">
        <div class="hero-content">
            <img src="/images/contact.jpg" alt="">
        </div>
    </div>

    <section class="contact-section">
        <div class="container">
            <div class="contact-grid">
                <!-- Contact Information -->
                <div class="contact-info">
                    <h2>Get In Touch</h2>
                    <p>Ready to discuss your aviation project? Our team of experts is here to help you find the perfect
                        solution for your airfield requirements.</p>

                    <div class="contact-cards">
                        <div class="contact-card">
                            <div class="contact-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div class="contact-details">
                                <h3>Visit Us</h3>
                                <p><strong>Delhi Office</strong><br>
                                    Vardhman Aviation Systems<br>
                                    I &amp; II Floor, Plot no. 13, C and 13/3, Rama Rd, Side,<br>
                                    Najafgarh Road Industrial Area,<br>
                                    Delhi, 110015<br>
                                    India</p>

                                <br>

                                <p><strong>Pune Office</strong><br>
                                    Office No. 334, 3rd Floor,<br>
                                    Amanora Chambers, Hadapsar,<br>
                                    Pune, 411028<br>
                                    India</p>
                            </div>

                        </div>

                        <div class="contact-card">
                            <div class="contact-icon">
                                <i class="fas fa-phone"></i>
                            </div>
                            <div class="contact-details">
                                <h3>Call Us</h3>
                                <p> For Airports Business, Call @ <a href="tel:+919319729468">+91 9319729468</a><br>
                                For Defense Business, Call @ <a href="tel:+917428555878">+91 7428555878</a><br>
                                Landline & Fax @ <a href="tel:+01145710588">+011 45710588</a><br>
                                </p>
                            </div>
                        </div>

                        <div class="contact-card">
                            <div class="contact-icon">
                                <i class="fas fa-envelope"></i>
                            </div>
                            <div class="contact-details">
                                <h3>Email Us</h3>
                                <p><a href="mailto:defense@vardhmanairports.com">defense@vardhmanairports.com</a><br>
                                    <a href="mailto:enquiry@vardhmanairports.com">enquiry@vardhmanairports.com</a><br>
                                    <a href="mailto:hr@vardhmanairports.com">hr@vardhmanairports.com</a>
                                </p>
                            </div>
                        </div>

                        <div class="contact-card">
                            <div class="contact-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="contact-details">
                                <h3>Business Hours</h3>
                                <p>Monday - Friday: 09:00 AM - 6:00 PM<br>
                                    Saturday: 10:00 AM - 2:00 PM<br>
                                    Sunday: Closed</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Contact Form -->
                <div class="contact-form-container">
                    <div class="form-header">
                        <h2>Send Us a Message</h2>
                        <p>Fill out the form below</p>
                    </div>

                    <!-- Success/Error Messages -->
                    <div id="formMessage" class="form-message" style="display: none;"></div>

                    <form class="contact-form" id="contactForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="firstName">First Name *</label>
                                <input type="text" id="firstName" name="firstName" required>
                                <span class="error-message" id="firstNameError"></span>
                            </div>
                            <div class="form-group">
                                <label for="lastName">Last Name *</label>
                                <input type="text" id="lastName" name="lastName" required>
                                <span class="error-message" id="lastNameError"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="email">Email Address *</label>
                                <input type="email" id="email" name="email" required>
                                <span class="error-message" id="emailError"></span>
                            </div>
                            <div class="form-group">
                                <label for="phone">Phone Number</label>
                                <input type="tel" id="phone" name="phone">
                                <span class="error-message" id="phoneError"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="company">Company/Organization</label>
                                <input type="text" id="company" name="company">
                            </div>
                            <div class="form-group">
                                <label for="position">Position/Title</label>
                                <input type="text" id="position" name="position">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="subject">Subject *</label>
                            <select id="subject" name="subject" required>
                                <option value="">Select a subject</option>
                                <option value="product-inquiry">Product Inquiry</option>
                                <option value="quote-request">Quote Request</option>
                                <option value="technical-support">Technical Support</option>
                                <option value="partnership">Partnership Opportunity</option>
                                <option value="maintenance">Maintenance Services</option>
                                <option value="general">General Inquiry</option>
                                <option value="other">Other</option>
                            </select>
                            <span class="error-message" id="subjectError"></span>
                        </div>



                        <div class="form-group">
                            <label for="message">Message *</label>
                            <textarea id="message" name="message" rows="15"
                                placeholder="Please provide details about your requirements, project scope, or any specific questions you have..."
                                required></textarea>
                            <span class="error-message" id="messageError"></span>
                        </div>

                        <button type="submit" class="submit-btn" id="submitBtn">
                            <span id="btnText">Send Message</span>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </section>

    <!-- Google Maps Tabbed Section -->
    <section class="map-section" style="padding-top: 0 !important;">
        <div class="container" >
            <h2 style="padding: 0 !important; margin: 0">Find Us</h2>

            <!-- Tabs -->
            <ul class="nav nav-tabs justify-content-center" id="officeTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="delhi-tab" data-bs-toggle="tab" data-bs-target="#delhi"
                        type="button" role="tab" aria-controls="delhi" aria-selected="true">
                        Delhi Office
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="pune-tab" data-bs-toggle="tab" data-bs-target="#pune" type="button"
                        role="tab" aria-controls="pune" aria-selected="false">
                        Pune Office
                    </button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content" id="officeTabsContent">

                <!-- Delhi -->
                <div class="tab-pane fade show active" id="delhi" role="tabpanel" aria-labelledby="delhi-tab">
                    <div class="map-container">
                        <iframe
                            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3501.674!2d77.1245!3d28.6692!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x390d025e8a9da58d%3A0xad324c91accb5f8b!2sNajafgarh%20Road%20Industrial%20Area%2C%20Delhi!5e0!3m2!1sen!2sin!4v1640000000000!5m2!1sen!2sin"
                            width="100%" height="400" style="border:0;" allowfullscreen="" loading="lazy"
                            referrerpolicy="no-referrer-when-downgrade">
                        </iframe>
                    </div>
                </div>

                <!-- Pune -->
                <div class="tab-pane fade" id="pune" role="tabpanel" aria-labelledby="pune-tab">
                    <div class="map-container">
                        <iframe
                            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3783.2!2d73.9334!3d18.5182!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3bc2c22241555591%3A0x55b4e980eb492d65!2sAmanora%20Chambers%2C%20Hadapsar%2C%20Pune!5e0!3m2!1sen!2sin!4v1640000000000!5m2!1sen!2sin"
                            width="100%" height="400" style="border:0;" allowfullscreen="" loading="lazy"
                            referrerpolicy="no-referrer-when-downgrade">
                        </iframe>
                    </div>
                </div>

            </div>
        </div>
    </section>

    <!-- Privacy Policy Modal -->
    <div id="privacyModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close" onclick="closePrivacyPolicy()">&times;</span>
            <h2>Privacy Policy</h2>
            <div class="modal-body">
                <p><strong>Data Collection:</strong> We collect information you provide through our contact form to
                    respond to your inquiries and provide our services.</p>
                <p><strong>Data Usage:</strong> Your information is used solely for business communication and will not
                    be shared with third parties without your consent.</p>
                <p><strong>Data Security:</strong> We implement appropriate security measures to protect your personal
                    information.</p>
                <p><strong>Contact:</strong> For privacy concerns, contact us at privacy@vardhmanaviation.com</p>
            </div>
        </div>
    </div>

    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .contact-hero img{
            width: 100%;
        }

        .hero-content {
            position: relative;
            z-index: 1;
            color: white;
        }

        .hero-content h1 {
            font-size: 3rem;
            margin-bottom: 16px;
            font-weight: 700;
        }

        .hero-content p {
            font-size: 1.2rem;
            opacity: 0.9;
            color: #f0f0f0;
            margin: 0;
        }

        .contact-section {
            padding: 60px 0;
            background: #f8f9fa;
        }

        .contact-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            align-items: start;
        }

        .contact-info h2 {
            color: #2a5298;
            font-size: 2.2rem;
            margin-bottom: 16px;
        }

        .contact-info>p {
            font-size: 1.1rem;
            color: #666;
            margin-bottom: 32px;
            line-height: 1.6;
        }

        .contact-cards {
            display: grid;
            gap: 24px;
        }

        .contact-card {
            display: flex;
            align-items: flex-start;
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
            transition: box-shadow 0.3s ease;
        }

        .contact-card:hover {
            box-shadow: 0 8px 24px rgba(42, 82, 152, 0.12);
        }

        .contact-icon {
            background: linear-gradient(135deg, #2a5298, #1e3c72);
            color: white;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.3rem;
            margin-right: 16px;
            flex-shrink: 0;
        }

        .contact-details h3 {
            color: #2a5298;
            font-size: 1.2rem;
            margin-bottom: 8px;
        }

        .contact-details p {
            color: #666;
            line-height: 1.5;
            margin: 0;
        }

        .contact-details a {
            color: #2a5298;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .contact-details a:hover {
            color: #1e3c72;
        }

        .contact-form-container {
            background: white;
            border-radius: 16px;
            padding: 32px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
        }

        .form-header h2 {
            color: #2a5298;
            font-size: 1.8rem;
            margin-bottom: 8px;
        }

        .form-header p {
            color: #666;
            margin-bottom: 24px;
        }

        .form-message {
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .form-message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .form-message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            color: #333;
            font-weight: 600;
            font-size: 0.95rem;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 15px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            background: #fff;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #2a5298;
            box-shadow: 0 0 0 3px rgba(42, 82, 152, 0.1);
        }

        .form-group input.error,
        .form-group select.error,
        .form-group textarea.error {
            border-color: #dc3545;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 120px;
        }

        .error-message {
            color: #dc3545;
            font-size: 13px;
            margin-top: 4px;
            display: block;
        }

        .checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 12px;
            margin-top: 8px;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            cursor: pointer;
            font-weight: normal !important;
            margin-bottom: 0 !important;
            font-size: 0.95rem;
        }

        .checkbox-label input[type="checkbox"] {
            display: none;
        }

        .checkmark {
            width: 18px;
            height: 18px;
            border: 2px solid #ddd;
            border-radius: 3px;
            margin-right: 10px;
            position: relative;
            transition: all 0.3s ease;
            flex-shrink: 0;
        }

        .checkbox-label input[type="checkbox"]:checked+.checkmark {
            background: #2a5298;
            border-color: #2a5298;
        }

        .checkbox-label input[type="checkbox"]:checked+.checkmark::after {
            content: '✓';
            position: absolute;
            color: white;
            font-size: 12px;
            font-weight: bold;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .privacy-label {
            margin-top: 16px;
        }

        .privacy-label a {
            color: #2a5298;
            text-decoration: none;
            cursor: pointer;
        }

        .privacy-label a:hover {
            text-decoration: underline;
        }

        .submit-btn {
            background: linear-gradient(135deg, #2a5298, #1e3c72);
            color: white;
            border: none;
            padding: 14px 32px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
            margin-top: 16px;
        }

        .submit-btn:hover:not(:disabled) {
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            box-shadow: 0 4px 16px rgba(42, 82, 152, 0.3);
        }

        .submit-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .submit-btn .spinner {
            width: 18px;
            height: 18px;
            border: 2px solid #ffffff33;
            border-top: 2px solid #ffffff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .map-section {
            padding: 60px 0;
            background: #f4f8fb;
        }

        .map-section h2 {
            text-align: center;
            color: #2a5298;
            font-size: 2.2rem;
            margin-bottom: 32px;
        }

        .nav-tabs {
            border-bottom: 2px solid #e0e0e0;
            margin-bottom: 32px;
        }

        .nav-tabs .nav-link {
            background: none;
            border: none;
            padding: 12px 24px;
            color: #666;
            font-weight: 500;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .nav-tabs .nav-link:hover {
            color: #2a5298;
            border-bottom-color: #2a5298;
        }

        .nav-tabs .nav-link.active {
            color: #2a5298;
            border-bottom-color: #2a5298;
        }

        .map-container {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
        }

        .map-container iframe {
            width: 100%;
            height: 400px;
            border: none;
        }

        /* Modal Styles */
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 8% auto;
            padding: 32px;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            position: relative;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 24px;
            font-weight: bold;
            position: absolute;
            top: 16px;
            right: 20px;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .modal-body p {
            margin-bottom: 12px;
            line-height: 1.6;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .contact-hero {
                padding: 60px 0 40px;
            }

            .hero-content h1 {
                font-size: 2.2rem;
            }

            .contact-section {
                padding: 40px 0;
            }

            .contact-grid {
                grid-template-columns: 1fr;
                gap: 32px;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .contact-info h2 {
                font-size: 1.8rem;
            }

            .checkbox-group {
                grid-template-columns: 1fr;
            }

            .contact-form-container {
                padding: 24px;
            }

            .map-section {
                padding: 40px 0;
            }

            .map-section h2 {
                font-size: 1.8rem;
            }
        }

        @media (max-width: 480px) {
            .contact-hero {
                padding: 40px 0 30px;
            }

            .hero-content h1 {
                font-size: 1.8rem;
            }

            .contact-form-container {
                padding: 20px;
            }

            .contact-card {
                padding: 20px;
            }
        }
    </style>

    <script>
        // Form validation and submission
        class ContactForm {
            constructor() {
                this.form = document.getElementById('contactForm');
                this.submitBtn = document.getElementById('submitBtn');
                this.btnText = document.getElementById('btnText');
                this.formMessage = document.getElementById('formMessage');
                this.isSubmitting = false; // Add flag to prevent double submission

                this.init();
            }

            init() {
                if (!this.form) {
                    console.error('Contact form not found');
                    return;
                }

                // Remove any existing event listeners to prevent duplicates
                this.form.removeEventListener('submit', this.handleSubmit);
                this.form.addEventListener('submit', this.handleSubmit.bind(this));

                // Real-time validation
                const inputs = this.form.querySelectorAll('input, select, textarea');
                inputs.forEach(input => {
                    // Remove existing listeners first
                    input.removeEventListener('blur', this.validateField);
                    input.removeEventListener('input', this.clearError);

                    // Add new listeners
                    input.addEventListener('blur', () => this.validateField(input));
                    input.addEventListener('input', () => this.clearError(input));
                });
            }

            validateField(field) {
                const value = field.value.trim();
                const name = field.name;
                let isValid = true;
                let errorMessage = '';

                // Clear previous error
                this.clearError(field);

                switch (name) {
                    case 'firstName':
                    case 'lastName':
                        if (!value) {
                            errorMessage = `${name === 'firstName' ? 'First' : 'Last'} name is required`;
                            isValid = false;
                        } else if (value.length < 2) {
                            errorMessage = `${name === 'firstName' ? 'First' : 'Last'} name must be at least 2 characters`;
                            isValid = false;
                        }
                        break;

                    case 'email':
                        if (!value) {
                            errorMessage = 'Email is required';
                            isValid = false;
                        } else if (!this.isValidEmail(value)) {
                            errorMessage = 'Please enter a valid email address';
                            isValid = false;
                        }
                        break;

                    case 'phone':
                        if (value && !this.isValidPhone(value)) {
                            errorMessage = 'Please enter a valid phone number';
                            isValid = false;
                        }
                        break;

                    case 'subject':
                        if (!value) {
                            errorMessage = 'Please select a subject';
                            isValid = false;
                        }
                        break;

                    case 'message':
                        if (!value) {
                            errorMessage = 'Message is required';
                            isValid = false;
                        } else if (value.length < 10) {
                            errorMessage = 'Message must be at least 10 characters';
                            isValid = false;
                        }
                        break;
                }

                if (!isValid) {
                    this.showError(field, errorMessage);
                }

                return isValid;
            }

            isValidEmail(email) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(email);
            }

            isValidPhone(phone) {
                const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
                return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''));
            }

            showError(field, message) {
                field.classList.add('error');
                const errorElement = document.getElementById(field.name + 'Error');
                if (errorElement) {
                    errorElement.textContent = message;
                }
            }

            clearError(field) {
                field.classList.remove('error');
                const errorElement = document.getElementById(field.name + 'Error');
                if (errorElement) {
                    errorElement.textContent = '';
                }
            }

            validateForm() {
                const requiredFields = ['firstName', 'lastName', 'email', 'subject', 'message'];
                let isValid = true;

                requiredFields.forEach(fieldName => {
                    const field = this.form.querySelector(`[name="${fieldName}"]`);
                    if (!this.validateField(field)) {
                        isValid = false;
                    }
                });

                return isValid;
            }

            async handleSubmit(e) {
                e.preventDefault();
                e.stopPropagation(); // Prevent event bubbling

                console.log('Form submitted');

                // Prevent double submission
                if (this.isSubmitting) {
                    console.log('Form is already being submitted, ignoring...');
                    return;
                }

                if (!this.validateForm()) {
                    this.showMessage('Please correct the errors above', 'error');
                    return;
                }

                this.isSubmitting = true;
                this.setLoading(true);

                try {
                    const result = await this.submitForm();
                    console.log('Form submission successful:', result);
                    this.showMessage(result.message, 'success');
                    this.form.reset();

                    // Clear auto-saved data
                    if (typeof formAutoSave !== 'undefined') {
                        formAutoSave = {};
                    }
                } catch (error) {
                    console.error('Form submission error:', error);
                    this.showMessage(error.message, 'error');
                } finally {
                    this.isSubmitting = false;
                    this.setLoading(false);
                }
            }

            async submitForm() {
                const formData = new FormData(this.form);
                const data = Object.fromEntries(formData.entries());

                console.log('Submitting form data:', data);

                try {
                    const response = await fetch('/contact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    console.log('Response status:', response.status);

                    let result;
                    const contentType = response.headers.get('content-type');

                    if (contentType && contentType.includes('application/json')) {
                        result = await response.json();
                    } else {
                        const text = await response.text();
                        console.log('Non-JSON response:', text);
                        throw new Error('Server returned non-JSON response');
                    }

                    console.log('Server response:', result);

                    if (response.ok && result.success) {
                        return Promise.resolve(result);
                    } else {
                        return Promise.reject(new Error(result.error || 'Failed to send message'));
                    }
                } catch (error) {
                    console.error('Network error:', error);

                    // Provide more specific error messages
                    if (error.name === 'TypeError' && error.message.includes('fetch')) {
                        return Promise.reject(new Error('Network error. Please check your connection and try again.'));
                    } else if (error.name === 'SyntaxError') {
                        return Promise.reject(new Error('Invalid server response. Please try again.'));
                    } else {
                        return Promise.reject(new Error(error.message || 'Unknown error occurred'));
                    }
                }
            }

            setLoading(loading) {
                if (loading) {
                    this.submitBtn.disabled = true;
                    this.btnText.innerHTML = '<div class="spinner"></div> Sending...';
                } else {
                    this.submitBtn.disabled = false;
                    this.btnText.innerHTML = '<i class="fas fa-paper-plane"></i> Send Message';
                }
            }

            showMessage(message, type) {
                if (!this.formMessage) {
                    console.error('Form message element not found');
                    return;
                }

                this.formMessage.textContent = message;
                this.formMessage.className = `form-message ${type}`;
                this.formMessage.style.display = 'block';

                // Auto-hide success messages after 5 seconds
                if (type === 'success') {
                    setTimeout(() => {
                        this.formMessage.style.display = 'none';
                    }, 5000);
                }

                // Scroll to message
                this.formMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }
        }

        // Privacy Policy Modal Functions
        function showPrivacyPolicy() {
            document.getElementById('privacyModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closePrivacyPolicy() {
            document.getElementById('privacyModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // Form auto-save functionality (in memory only)
        let formAutoSave = {};

        function saveFormData() {
            const form = document.getElementById('contactForm');
            if (!form) return;

            const formData = new FormData(form);

            for (let [key, value] of formData.entries()) {
                formAutoSave[key] = value;
            }

            // Save checkboxes separately
            const checkboxes = form.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                formAutoSave[checkbox.name + '_checked'] = checkbox.checked;
            });
        }

        function loadFormData() {
            const form = document.getElementById('contactForm');
            if (!form) return;

            for (let [key, value] of Object.entries(formAutoSave)) {
                if (key.endsWith('_checked')) {
                    const fieldName = key.replace('_checked', '');
                    const checkbox = form.querySelector(`input[name="${fieldName}"]`);
                    if (checkbox && checkbox.type === 'checkbox') {
                        checkbox.checked = value;
                    }
                } else {
                    const field = form.querySelector(`[name="${key}"]`);
                    if (field && field.type !== 'checkbox') {
                        field.value = value;
                    }
                }
            }
        }

        // Global variable to track if form is already initialized
        let contactFormInstance = null;

        // Initialize form when DOM is loaded - SINGLE INITIALIZATION
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM loaded, initializing contact form');

            // Prevent double initialization
            if (contactFormInstance) {
                console.log('Contact form already initialized');
                return;
            }

            contactFormInstance = new ContactForm();

            // Close modal when clicking outside
            window.onclick = function (event) {
                const modal = document.getElementById('privacyModal');
                if (event.target === modal) {
                    closePrivacyPolicy();
                }
            }

            // Add smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Add animation to contact cards on scroll
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, observerOptions);

            // Observe contact cards for animation
            document.querySelectorAll('.contact-card').forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(30px)';
                card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
                observer.observe(card);
            });

            // Add character counter for message field
            const messageField = document.getElementById('message');
            if (messageField) {
                const maxLength = 1000;

                // Create character counter element
                const counterElement = document.createElement('div');
                counterElement.className = 'character-counter';
                counterElement.style.cssText = `
            font-size: 12px;
            color: #666;
            text-align: right;
            margin-top: 5px;
        `;
                messageField.parentNode.appendChild(counterElement);

                messageField.addEventListener('input', function () {
                    const currentLength = this.value.length;
                    counterElement.textContent = `${currentLength}/${maxLength} characters`;

                    if (currentLength > maxLength * 0.9) {
                        counterElement.style.color = '#dc3545';
                    } else if (currentLength > maxLength * 0.7) {
                        counterElement.style.color = '#ffc107';
                    } else {
                        counterElement.style.color = '#666';
                    }
                });

                // Initialize character counter
                messageField.dispatchEvent(new Event('input'));
            }

            // Add form progress indicator
            const form = document.getElementById('contactForm');
            if (form) {
                const requiredFields = form.querySelectorAll('[required]');

                const progressBar = document.createElement('div');
                progressBar.className = 'form-progress';
                progressBar.innerHTML = `
            <div class="progress-bar">
                <div class="progress-fill"></div>
            </div>
            <span class="progress-text">0% Complete</span>
        `;

                const progressStyles = document.createElement('style');
                progressStyles.textContent = `
            .form-progress {
                margin-bottom: 30px;
                padding: 15px;
                background: #f8f9fa;
                border-radius: 10px;
                border: 1px solid #e9ecef;
            }
            .progress-bar {
                width: 100%;
                height: 8px;
                background: #e9ecef;
                border-radius: 4px;
                overflow: hidden;
                margin-bottom: 8px;
            }
            .progress-fill {
                height: 100%;
                background: linear-gradient(135deg, #2a5298, #1e3c72);
                width: 0%;
                transition: width 0.3s ease;
            }
            .progress-text {
                font-size: 14px;
                color: #666;
                font-weight: 500;
            }
        `;
                document.head.appendChild(progressStyles);

                form.insertBefore(progressBar, form.firstChild);

                function updateProgress() {
                    let filledFields = 0;
                    requiredFields.forEach(field => {
                        if (field.type === 'checkbox') {
                            if (field.checked) filledFields++;
                        } else {
                            if (field.value.trim()) filledFields++;
                        }
                    });

                    const progress = (filledFields / requiredFields.length) * 100;
                    const progressFill = document.querySelector('.progress-fill');
                    const progressText = document.querySelector('.progress-text');

                    if (progressFill && progressText) {
                        progressFill.style.width = progress + '%';
                        progressText.textContent = Math.round(progress) + '% Complete';
                    }
                }

                requiredFields.forEach(field => {
                    field.addEventListener('input', updateProgress);
                    field.addEventListener('change', updateProgress);
                });
            }

            // Handle map iframe errors
            const mapIframes = document.querySelectorAll('.map-container iframe');
            mapIframes.forEach(iframe => {
                iframe.addEventListener('error', function () {
                    const container = this.parentElement;
                    const fallbackHtml = `
                <div class="map-error" style="text-align: center; padding: 40px; background: #f8f9fa; border-radius: 8px;">
                    <i class="fas fa-map-marker-alt" style="font-size: 2rem; color: #2a5298; margin-bottom: 16px;"></i>
                    <p>Unable to load map. This may be due to ad blockers or browser settings.</p>
                    <a href="https://maps.google.com" target="_blank" class="btn btn-primary">
                        Open in Google Maps
                    </a>
                </div>
            `;
                    container.innerHTML = fallbackHtml;
                });
            });
        });

        // Add error handling for uncaught errors
        window.addEventListener('error', function (e) {
            console.error('JavaScript error:', e.error);
        });

        window.addEventListener('unhandledrejection', function (e) {
            console.error('Unhandled promise rejection:', e.reason);
        });

        // Add keyboard navigation support
        document.addEventListener('keydown', function (e) {
            // Close modal with Escape key
            if (e.key === 'Escape') {
                const modal = document.getElementById('privacyModal');
                if (modal && modal.style.display === 'block') {
                    closePrivacyPolicy();
                }
            }
        });

        // Save form data periodically
        setInterval(saveFormData, 10000); // Save every 10 seconds

        // Load saved data when page loads
        window.addEventListener('load', () => {
            setTimeout(loadFormData, 500);
        });
    </script>
    <%- include('partials/footer') %>